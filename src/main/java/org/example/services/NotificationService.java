package org.example.services;

import org.example.commands.AddCommand;

import java.util.List;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.example.ozon.ProductInfoCollector;
import org.example.ozon.FetchHtml;

public class NotificationService {

    private final AddCommand addCommand;

    public NotificationService(AddCommand addCommand) {
        this.addCommand = addCommand;

        startNotificationScheduler();
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
     */
    private void sendPeriodicNotifications() {
        try {
            List<Map<String, Object>> trackedProducts = addCommand.getTrackedProducts();

            for (Map<String, Object> product : trackedProducts) {
                long userId = (long) product.get("user_id");
                String productName = (String) product.get("product_name");
                int currentPrice = (int) product.get("current_price");

                String notificationMessage = String.format(
                        "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¢–æ–≤–∞—Ä '%s' —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç %d‚ÇΩ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Ä–∞ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à–∏ —Ü–µ–ª–∏?",
                        productName, currentPrice
                );

                sendMessageToUser(userId, notificationMessage);
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " + e.getMessage());
        }
    }


    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω.
     */
    public void checkPriceUpdatesAndNotify() {
        try {
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä PriceMonitoringService
            PriceMonitoringService priceMonitoringService = new PriceMonitoringService(addCommand);

            List<Map<String, Object>> updatedProducts = priceMonitoringService.checkAndUpdatePrices();

            for (Map<String, Object> product : updatedProducts) {
                boolean priceDropped = (boolean) product.get("price_dropped");

                if (priceDropped) {
                    long userId = (long) product.get("user_id");
                    String productName = (String) product.get("product_name");
                    int currentPrice = (int) product.get("current_price");
                    int desiredPrice = (int) product.get("desired_price");

                    String notificationMessage = String.format(
                            "üîî –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä '%s' —Å–Ω–∏–∑–∏–ª–∞—Å—å –¥–æ %d‚ÇΩ (–≤–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: %d‚ÇΩ).",
                            productName, currentPrice, desiredPrice
                    );
                    sendMessageToUser(userId, notificationMessage);
                }
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " + e.getMessage());
        }
    }


    /**
     * –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
     */
    private void startNotificationScheduler() {
        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

        scheduler.scheduleAtFixedRate(
                this::sendPeriodicNotifications,
                0, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
                6, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ (–≤ —á–∞—Å–∞—Ö)
                TimeUnit.HOURS // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        );

        System.out.println("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.");
    }

    private void sendMessageToUser(long userId, String message) {
        System.out.printf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s%n", userId, message);
    }


}
